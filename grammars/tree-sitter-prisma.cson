name: 'Prisma'
scopeName: 'source.prisma'
type: 'tree-sitter'
parser: 'tree-sitter-prisma'

fileTypes: [
  'prisma'
]

comments:
  start: '//'

injectionRegex: '^prisma$'

folds: [
  {
    type: 'comment'
  }
  {
    start: { index: 0, type: '{' }
    end: { index: -1, type: '}' }
  }
  {
    start: { index: 0, type: '[' }
    end: { index: -1, type: ']' }
  }
]
scopes:
  'program': 'source.prisma'

  '''
  identifier,
  variable
  ''': [
    {match: '^[A-Z\\d_]+$', scopes: 'constant.other'}
  ]
  'enumeral': 'constant.other'

  '''
  attribute > identifier,
  attribute > call_expression > identifier,
  attribute > member_expression,
  attribute > call_expression > member_expression
  ''': 'entity.name.tag'

  '''
  datasource_declaration > identifier,
  model_declaration > identifier,
  generator_declaration > identifier,
  enum_declaration > identifier,
  call_expression > identifier,
  type_declaration > identifier:nth-child(1),
  type_declaration > assignment_expression > variable
  ''': 'entity.name.function'

  'type_declaration > identifier:nth-child(2)': [
    {match: '^[A-Z\\d_]+$', scopes: 'constant.other'},
    {match: '.*', scopes: 'support.storage.type'}
  ],

  'type_declaration > assignment_expression > identifier': 'support.storage.type'

  'column_type > identifier': 'support.storage.type'

  '"("': 'punctuation.definition.parameters.begin.bracket.round'
  '")"': 'punctuation.definition.parameters.end.bracket.round'
  '"{"': 'punctuation.definition.function.body.begin.bracket.curly'
  '"}"': 'punctuation.definition.function.body.end.bracket.curly'

  '"["': 'punctuation.definition.array.begin.bracket.square'
  '"]"': 'punctuation.definition.array.end.bracket.square'

  'null': 'constant.language.null'
  'true': 'constant.language.boolean.true'
  'false': 'constant.language.boolean.false'

  '"."': 'meta.delimiter.period'
  '","': 'meta.delimiter.comma'

  '''
  "=",
  ":",
  "?",
  "&&",
  "||",
  "|",
  "+"
  ''': 'keyword.operator.prisma'

  '"model"': 'storage.type.model'
  '"generator"': 'storage.type.generator'
  '"datasource"': 'storage.type.datasource'
  '"enum"': 'storage.type.enum'
  '"type"': 'storage.type.tyoe'
  'comment': [
    {
      match: "^/// ",
      scopes: 'comment.line'
    },
    'comment.block'
  ]
  'developer_comment': [
    {
      match: "^// ",
      scopes: 'comment.line'
    },
    'comment.block'
  ]

  'number': 'constant.numeric'
  'string': 'string.quoted'
