name: 'Prisma'
scopeName: 'source.prisma'
type: 'tree-sitter'
parser: 'tree-sitter-prisma'

fileTypes: [
  'prisma'
]

comments:
  start: '//'

injectionRegex: '^prisma$'

folds: [
  {
    type: 'comment'
  }
  {
    start: { index: 0, type: '{' }
    end: { index: -1, type: '}' }
  }
  {
    start: { index: 0, type: '[' }
    end: { index: -1, type: ']' }
  }
]
scopes:
  'program': 'source.prisma'

  '''
  identifier,
  variable
  ''': [
    {match: '^[A-Z\\d_]+$', scopes: 'constant.other'}
  ]
  'enumeral': 'constant.other'

  # 'identifier': 'storage.type.identifier'
  # 'identifier': 'entity.name.function'
  # 'structure_identifier': 'entity.name.function'

  '''
  attribute > identifier,
  attribute > call_expression > identifier,
  attribute > member_expression,
  attribute > call_expression > member_expression
  ''': 'entity.name.tag'

  '''
  datasource_declaration > identifier,
  model_declaration > identifier,
  generator_declaration > identifier,
  enum_declaration > identifier,
  call_expression > identifier,
  type_declaration > identifier:nth-child(1),
  type_declaration > assignment_expression > variable
  ''': 'entity.name.function'

  'type_declaration > identifier:nth-child(2)': [
    {match: '^[A-Z\\d_]+$', scopes: 'constant.other'},
    {match: '.*', scopes: 'support.storage.type'}
  ],

  'type_declaration > assignment_expression > identifier': 'support.storage.type'

  # '''
  # column_declaration > identifier,
  # ''': 'variable.other.column.property'
  'column_type > identifier': 'support.storage.type'

  # '''
  # "String",
  # "Int",
  # "Float",
  # "Subscription",
  # "DateTime",
  # "WhereInput",
  # "IDFilter",
  # "StringFilter"
  # '''
  # 'identifier': [
  #   {
  #     match: '^(global|module|exports|__filename|__dirname|window|document)$',
  #     scopes: 'support.variable'
  #   },
  # ]

  # 'property_identifier': [
  #   {
  #     match: '^[\$A-Z_]+$',
  #     scopes: 'constant.other.property.prisma'
  #   }
  #
  #   'variable.other.object.property'
  # ]
  #
  # 'member_expression > property_identifier': 'variable.other.object.property.unquoted'
  #
  '"("': 'punctuation.definition.parameters.begin.bracket.round'
  '")"': 'punctuation.definition.parameters.end.bracket.round'
  '"{"': 'punctuation.definition.function.body.begin.bracket.curly'
  '"}"': 'punctuation.definition.function.body.end.bracket.curly'

  '"["': 'punctuation.definition.array.begin.bracket.square'
  '"]"': 'punctuation.definition.array.end.bracket.square'

  'null': 'constant.language.null'
  'true': 'constant.language.boolean.true'
  'false': 'constant.language.boolean.false'

  '"."': 'meta.delimiter.period'
  '","': 'meta.delimiter.comma'
  #
  '"="': 'keyword.operator.prisma'
  # '"!"': 'keyword.operator.prisma'
  # '"+"': 'keyword.operator.prisma'
  # '"-"': 'keyword.operator.prisma'
  # '"*"': 'keyword.operator.prisma'
  # '"/"': 'keyword.operator.prisma'
  # '"%"': 'keyword.operator.prisma'
  # '"=="': 'keyword.operator.prisma'
  # '"!="': 'keyword.operator.prisma'
  # '">="': 'keyword.operator.prisma'
  # '"<="': 'keyword.operator.prisma'
  # '">"': 'keyword.operator.prisma'
  # '"<"': 'keyword.operator.prisma'
  '":"': 'keyword.operator.prisma'
  '"?"': 'keyword.operator.prisma'
  '"&&"': 'keyword.operator.prisma'
  '"||"': 'keyword.operator.prisma'
  # '"~"': 'keyword.operator.prisma'
  # '"^"': 'keyword.operator.prisma'
  # '">>"': 'keyword.operator.prisma'
  # '"<<"': 'keyword.operator.prisma'
  '"|"': 'keyword.operator.prisma'
  #
  # # 'model_definition': 'meta.class'
  '"model"': 'storage.type.model'
  '"generator"': 'storage.type.generator'
  '"datasource"': 'storage.type.datasource'
  '"enum"': 'storage.type.enum'
  '"type"': 'storage.type.tyoe'
  # '"datasource"': 'storage.type.datasource'
  # 'model > identifier': 'entity.name.model'
  # 'datasource > identifier': 'entity.name.datasource'
  # 'column_declaration > identifier': 'variable.other.object.property',
  'comment': [
    {
      match: "^/// ",
      scopes: 'comment.line'
    },
    'comment.block'
  ]
  'developer_comment': [
    {
      match: "^// ",
      scopes: 'comment.line'
    },
    'comment.block'
  ]
  #
  # 'namespace': 'meta.function'
  # # 'namespace': 'storage.type.namespace'
  # 'namespace > identifier': 'entity.name.function'
  #
  # 'namespace > call_expression > identifier': 'entity.name.function'
  # 'call_expression > identifier': 'entity.name.function'
  #
  # 'call_expression > member_expression > property_identifier': 'entity.name.function'
  #
  # 'call_expression > member_expression > property_identifier': 'entity.name.function'
  #
  'number': 'constant.numeric'
  'string': 'string.quoted'
  #
  # 'type_identifier': 'support.storage.type'
  #
  # 'identifier': [
  #   {
  #     exact: /String|DateTime/,
  #     scopes: 'builtin.variable'
  #   }
  #   # {
  #   #   match: '^(global|module|exports|__filename|__dirname|window|document)$',
  #   #   scopes: 'support.variable'
  #   # },
  #   # {
  #   #   exact: 'require', scopes: 'support.function'
  #   # }
  #   # {
  #   #   match: '^[\$A-Z_]{2,}$',
  #   #   scopes: 'constant.other'
  #   # },
  #   {
  #     match: '^[\$A-Z_]{2,}$',
  #     scopes: 'constant.other'
  #   },
  #   {
  #     match: '^[A-Z]',
  #     scopes: 'meta.class'
  #   },
  # ]
